{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"A6","provenance":[],"mount_file_id":"1gzJU4Hw7V7HME-uX8gkxaOELk0qzaiNf","authorship_tag":"ABX9TyN0mWOSBjA2zrfRQ/r2gh8I"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"8H-ot1hAvEuH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606371681982,"user_tz":420,"elapsed":176451,"user":{"displayName":"菅泳钦","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GisNkEPQ1MIyihCSP3C7W28PHOGAXAyhKjVek8T=s64","userId":"04446447163478496729"}},"outputId":"cac6dfb0-7a6b-4e93-84b1-308c3c1a8182"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"hLExSlUvpsAf","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606417398507,"user_tz":420,"elapsed":512,"user":{"displayName":"菅泳钦","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GisNkEPQ1MIyihCSP3C7W28PHOGAXAyhKjVek8T=s64","userId":"04446447163478496729"}},"outputId":"d0ed5d68-2dff-4e05-e0a1-41f248ebe2a6"},"source":["cd  \"drive/My Drive/Cmput 328/Assignment6\""],"execution_count":2,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/Cmput 328/Assignment6\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ION9ScLoytUv","executionInfo":{"status":"ok","timestamp":1606416887601,"user_tz":420,"elapsed":474,"user":{"displayName":"菅泳钦","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GisNkEPQ1MIyihCSP3C7W28PHOGAXAyhKjVek8T=s64","userId":"04446447163478496729"}},"outputId":"95466495-1180-49ed-ec9a-dadc54bc3ccc"},"source":["!pwd"],"execution_count":4,"outputs":[{"output_type":"stream","text":["/content/drive/My Drive/Cmput 328/Assignment6\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7N9FrAAYyu2l","executionInfo":{"status":"ok","timestamp":1606417455806,"user_tz":420,"elapsed":55252,"user":{"displayName":"菅泳钦","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GisNkEPQ1MIyihCSP3C7W28PHOGAXAyhKjVek8T=s64","userId":"04446447163478496729"}},"outputId":"04d6ce57-154a-4fd7-ec17-1c24ceb83611"},"source":["%run A6_main.py"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Loading Model...\n","Testing on GPU: Tesla T4\n","Classification Acc: 0.9929\n","Detection IOU: 0.9504386382770967\n","Test time: 42.3524067401886\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XscxYvwUoy6h"},"source":["# Yongqin Jian\n","# 1472458\n","import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.utils.data as utils\n","import torch.nn.functional as F\n","\n","\n","def classify_and_detect(images):\n","    \"\"\"\n","    :param np.ndarray images: N x 4096 array containing N 64x64 images flattened into vectors\n","    :return: np.ndarray, np.ndarray\n","    \"\"\"\n","    N = images.shape[0]\n","\n","    # pred_class: Your predicted labels for the 2 digits, shape [N, 2]\n","    pred_class = np.empty((N, 2), dtype=np.int32)\n","\n","    # pred_bboxes: Your predicted bboxes for 2 digits, shape [N, 2, 4]\n","    pred_bboxes = np.empty((N, 2, 4), dtype=np.float64)\n","    \n","    \n","    #run_train(pred_class,pred_bboxes) # train the model from given data\n","\n","    # I re-defined my model classes and other in order to work without error\n","    # set up some parameters being used further\n","    class TrainParams:\n","      def __init__(self):\n","          #self.batch_size = 100\n","          #self.n_epochs = 20\n","          self.weights_path = './model.pt'\n","    class BlockNet(nn.Module):\n","          def __init__(self, in_channels, out_channels, stride):\n","              super(BlockNet, self).__init__()\n","              self.layer = nn.Sequential()\n","              self.layer.add_module(\"Conv\", nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=3, stride=stride, padding=1))\n","              self.layer.add_module(\"Bn\", nn.BatchNorm2d(out_channels))\n","              self.skip = nn.Sequential()\n","              if stride != 1 or in_channels != out_channels:\n","                  self.skip = nn.Sequential()\n","                  self.skip.add_module(\"Conv\", nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=3, stride=stride, padding=1))\n","                  self.skip.add_module(\"Bn\", nn.BatchNorm2d(out_channels))\n","          def forward(self, x):\n","              out = self.layer(x)\n","              out += self.skip(x)\n","              return F.relu(out)\n","    class ResNet(nn.Module):\n","      def __init__(self, bk):\n","          super(ResNet, self).__init__()\n","          self.layer1 = nn.Sequential()\n","          self.layer1.add_module(\"Conv\", nn.Conv2d(in_channels=1, out_channels=64, kernel_size=3, padding=1))\n","          self.layer1.add_module(\"Bn\", nn.BatchNorm2d(64))\n","          self.layer1.add_module(\"Relu\", nn.ReLU(True))\n","          self.pool = nn.AvgPool2d(kernel_size=4, stride=4)\n","          self.layer2 = nn.Sequential(bk(64, 64, 1),bk(64, 64, 1),)\n","          self.layer4 = nn.Sequential(bk(64, 128, 2),bk(128, 128, 1),)\n","          self.layer5 = nn.Sequential(bk(128, 256, 2),bk(256, 256, 1),)\n","          self.layer6 = nn.Sequential(bk(256, 512, 2),bk(512, 512, 1),)\n","          self.layer7 = nn.Sequential(bk(512, 1024, 2),bk(1024, 1024, 1),)\n","          self.linear = nn.Sequential(nn.Dropout(p=0.5),nn.Linear(1024, 512),nn.ReLU(True),nn.Linear(512, 37*4+20),)\n","      def forward(self, x):\n","          x = self.layer1(x)\n","          x = self.layer2(x)\n","          x = self.layer4(x)\n","          x = self.layer5(x)\n","          x = self.layer6(x)\n","          x = self.layer7(x)\n","          x = self.pool(x)\n","          x = x.view(x.size(0), -1)\n","          x = self.linear(x)\n","          cls = x[:,0:20]\n","          bb1 = x[:,20:]\n","          return cls.view(-1, 10, 2), bb1.view(-1, 4, 37)\n","\n","\n","\n","    # The Testing part Starts here\n","    param = TrainParams()\n","    print(\"Loading Model...\")\n","    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","    model=ResNet(BlockNet)\n","    model.load_state_dict(torch.load(param.weights_path,map_location=torch.device('cpu')))\n","    if torch.ruda.is_available:\n","      model.to(device)\n","    if torch.cuda.is_available():\n","      print('Testing on GPU: {}'.format(torch.cuda.get_device_name(0)))\n","    \n","    model.eval()\n","    with torch.no_grad():\n","      for i, image in enumerate(images):\n","        # Converting flatten images into normal image 64x64\n","        image = torch.Tensor(image).view(1, 1, 64, 64)\n","        image = image.to(device)\n","        cls, bb1 = model(image) # both prediction are generated by same model\n","        cls = torch.sort(cls)[0]  # sort the pred_classification in ascending order\n","        pred_cls = torch.max(cls.data, 1)[1]  \n","        pred_class[i] = pred_cls.cpu().detach().numpy()\n","        \n","        bb1_pred = torch.max(bb1[:,0,:].data, 1)[1]\n","        bb2_pred = torch.max(bb1[:,1,:].data, 1)[1]\n","        bb3_pred = torch.max(bb1[:,2,:].data, 1)[1]\n","        bb4_pred = torch.max(bb1[:,3,:].data, 1)[1]\n","\n","        # placeholder for bounding box index\n","        b_box = np.empty((2, 4))\n","\n","        # the first bounding box\n","        b_box[0][0] = bb1_pred\n","        b_box[0][1] = bb2_pred\n","        b_box[0][2] = bb1_pred+28 # since the bottom right is 28 unit away from top left\n","        b_box[0][3] = bb2_pred+28\n","\n","        # the second bounding box\n","        b_box[1][0] = bb3_pred\n","        b_box[1][1] = bb4_pred\n","        b_box[1][2] = bb3_pred+28\n","        b_box[1][3] = bb4_pred+28\n","\n","        pred_bboxes[i] = b_box\n","\n","    return pred_class, pred_bboxes\n","\n"," "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QNKFXeQXvVKx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606370455853,"user_tz":420,"elapsed":25211,"user":{"displayName":"菅泳钦","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GisNkEPQ1MIyihCSP3C7W28PHOGAXAyhKjVek8T=s64","userId":"04446447163478496729"}},"outputId":"83f8bced-2afd-407d-da29-4d4f55e203ed"},"source":["import time\n","import numpy as np\n","from skimage.draw import polygon\n","\n","#from A6_submission import classify_and_detect\n","\n","\n","def compute_classification_acc(pred, gt):\n","    assert pred.shape == gt.shape\n","    return (pred == gt).astype(int).sum() / gt.size\n","\n","\n","def compute_iou(b_pred, b_gt):\n","    \"\"\"\n","\n","    :param b_pred: predicted bounding boxes, shape=(n,2,4)\n","    :param b_gt: ground truth bounding boxes, shape=(n,2,4)\n","    :return:\n","    \"\"\"\n","\n","    n = np.shape(b_gt)[0]\n","    L_pred = np.zeros((64, 64))\n","    L_gt = np.zeros((64, 64))\n","    iou = 0.0\n","    for i in range(n):\n","        for b in range(2):\n","            rr, cc = polygon([b_pred[i, b, 0], b_pred[i, b, 0], b_pred[i, b, 2], b_pred[i, b, 2]],\n","                             [b_pred[i, b, 1], b_pred[i, b, 3], b_pred[i, b, 3], b_pred[i, b, 1]], [64, 64])\n","            L_pred[rr, cc] = 1\n","\n","            rr, cc = polygon([b_gt[i, b, 0], b_gt[i, b, 0], b_gt[i, b, 2], b_gt[i, b, 2]],\n","                             [b_gt[i, b, 1], b_gt[i, b, 3], b_gt[i, b, 3], b_gt[i, b, 1]], [64, 64])\n","            L_gt[rr, cc] = 1\n","\n","            iou += (1.0 / (2 * n)) * (np.sum((L_pred + L_gt) == 2) / np.sum((L_pred + L_gt) >= 1))\n","\n","            L_pred[:, :] = 0\n","            L_gt[:, :] = 0\n","\n","    return iou\n","\n","\n","def main():\n","    # prefix = \"test\"\n","    prefix = \"valid\"\n","\n","    images = np.load(prefix + \"_X.npy\")\n","\n","    start_t = time.time()\n","    pred_class, pred_bboxes = classify_and_detect(images)\n","    end_t = time.time()\n","\n","    gt_class = np.load(prefix + \"_Y.npy\")\n","    gt_bboxes = np.load(prefix + \"_bboxes.npy\")\n","    acc = compute_classification_acc(pred_class, gt_class)\n","    iou = compute_iou(pred_bboxes, gt_bboxes)\n","\n","    time_taken = end_t - start_t\n","\n","    print(f\"Classification Acc: {acc}\")\n","    print(f\"Detection IOU: {iou}\")\n","    print(f\"Test time: {time_taken}\")\n","\n","\n","if __name__ == '__main__':\n","    main()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Loading Model...\n","Testing on GPU: Tesla T4\n","Classification Acc: 0.9929\n","Detection IOU: 0.9504386382770967\n","Test time: 21.057359218597412\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"47aFUzV3ZtL1"},"source":["import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.utils.data as utils\n","import os\n","\n","class TrainParams:\n","    def __init__(self):\n","        self.batch_size = 100\n","        self.n_epochs = 15\n","        self.c0 = 1\n","        self.load_weights = 0\n","        self.root_path = ''\n","        self.weights_path = os.path.join(self.root_path, 'model.pt')\n","\n","\n","def adjust_lr_classifier(optimizer, epoch):\n","    lr = 0.01 * (0.1 ** (epoch // 10))\n","    for param_group in optimizer.param_groups:\n","        param_group['lr'] = lr\n","\n","\n","class BlockNet(nn.Module):\n","    def __init__(self, in_channels, out_channels, stride):\n","        super(BlockNet, self).__init__()\n","        self.layer = nn.Sequential()\n","        self.layer.add_module(\"Conv\", nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=3, stride=stride, padding=1))\n","        self.layer.add_module(\"Bn\", nn.BatchNorm2d(out_channels))\n","\n","        self.skip = nn.Sequential()\n","        if stride != 1 or in_channels != out_channels:\n","            self.skip = nn.Sequential()\n","            self.skip.add_module(\"Conv\", nn.Conv2d(in_channels=in_channels, out_channels=out_channels, kernel_size=3, stride=stride, padding=1))\n","            self.skip.add_module(\"Bn\", nn.BatchNorm2d(out_channels))\n","\n","    def forward(self, x):\n","        out = self.layer(x)\n","        out += self.skip(x)\n","        return F.relu(out)\n","\n","\n","class ResNet(nn.Module):\n","    def __init__(self, bk):\n","        super(ResNet, self).__init__()\n","\n","        self.layer1 = nn.Sequential()\n","        self.layer1.add_module(\"Conv\", nn.Conv2d(in_channels=1, out_channels=64, kernel_size=3, padding=1))\n","        self.layer1.add_module(\"Bn\", nn.BatchNorm2d(64))\n","        self.layer1.add_module(\"Relu\", nn.ReLU(True))\n","\n","        self.pool = nn.AvgPool2d(kernel_size=4, stride=4)\n","\n","        self.layer2 = nn.Sequential(\n","            bk(64, 64, 1),\n","            bk(64, 64, 1),\n","        )\n","\n","        self.layer4 = nn.Sequential(\n","            bk(64, 128, 2),\n","            bk(128, 128, 1),\n","        )\n","\n","        self.layer5 = nn.Sequential(\n","            bk(128, 256, 2),\n","            bk(256, 256, 1),\n","        )\n","\n","        self.layer6 = nn.Sequential(\n","            bk(256, 512, 2),\n","            bk(512, 512, 1),\n","        )\n","\n","        self.layer7 = nn.Sequential(\n","            bk(512, 1024, 2),\n","            bk(1024, 1024, 1),\n","        )\n","\n","        self.linear = nn.Sequential(\n","            nn.Dropout(p=0.5),\n","            nn.Linear(1024, 512),\n","            nn.ReLU(True),\n","            nn.Linear(512, 37*4+20),\n","        )\n","\n","    def forward(self, x):\n","        x = self.layer1(x)\n","        x = self.layer2(x)\n","        x = self.layer4(x)\n","        x = self.layer5(x)\n","        x = self.layer6(x)\n","        x = self.layer7(x)\n","        x = self.pool(x)\n","        x = x.view(x.size(0), -1)\n","        x = self.linear(x)\n","        cls = x[:,0:20]\n","        bb1 = x[:,20:]\n","        return cls.view(-1, 10, 2), bb1.view(-1, 4, 37)\n","\n","\n","def train(device, param):\n","    root_dir = param.root_path\n","    x_train = torch.Tensor(np.load(os.path.join(root_dir,'train_X.npy')))\n","    x_train = x_train.view(55000, 1, 64, 64)\n","    x_valid = torch.Tensor(np.load(os.path.join(root_dir,'valid_X.npy')))\n","    x_valid = x_valid.view(5000, 1, 64, 64)\n","    y_train = torch.Tensor(np.load(os.path.join(root_dir,'train_Y.npy'))).type(torch.LongTensor)\n","    y_valid = torch.Tensor(np.load(os.path.join(root_dir,'valid_Y.npy'))).type(torch.LongTensor)\n","    train_bboxes = torch.Tensor(np.load(os.path.join(root_dir,'train_bboxes.npy'))).type(torch.LongTensor)\n","    valid_bboxes = torch.Tensor(np.load(os.path.join(root_dir,'valid_bboxes.npy'))).type(torch.LongTensor)\n","\n","    train_dataset = utils.TensorDataset(x_train, y_train, train_bboxes)\n","    train_loader = utils.DataLoader(train_dataset, batch_size=param.batch_size)\n","\n","    valid_dataset = utils.TensorDataset(x_valid, y_valid, valid_bboxes)\n","    valid_loader = utils.DataLoader(valid_dataset, batch_size=param.batch_size)\n","\n","    model = ResNet(BlockNet).to(device)\n","    criterion = nn.CrossEntropyLoss().to(device)\n","    optimizer = torch.optim.SGD(model.parameters(), lr=0.01, momentum=0.97, weight_decay=0.001)\n","\n","    for epoch in range(1, param.n_epochs+1):\n","        model.train()\n","        adjust_lr_classifier(optimizer, epoch)\n","        for _, (images, labels, bbs) in enumerate(train_loader): \n","            images = images.to(device)\n","            labels = labels.to(device)\n","            bbs = bbs.to(device)\n","            optimizer.zero_grad()\n","            cls, bb1 = model(images)\n","            loss1 = criterion(torch.sort(cls)[0], labels)\n","            loss2 = criterion(bb1[:,0,:], bbs[:,0,0])\n","            loss3 = criterion(bb1[:,1,:], bbs[:,0,1])\n","            loss4 = criterion(bb1[:,2,:], bbs[:,1,0])\n","            loss5 = criterion(bb1[:,3,:], bbs[:,1,1])\n","            loss = loss1 + param.c0 * (loss2 + loss3 + loss4 + loss5)\n","            loss.backward()\n","            optimizer.step()\n","        \n","        # validation \n","        '''if epoch%10 == 0:\n","            model.eval()\n","            correct = 0\n","            total = 0\n","            pred_bb = []\n","            truth_bb = []\n","            with torch.no_grad():\n","                for images, labels, bbs in valid_loader:\n","                    images = images.to(device)\n","                    labels = labels.to(device)\n","                    cls, bb1 = model(images)\n","                    cls = torch.sort(cls)[0]\n","                    _, pred = torch.max(cls.data, 1)\n","                    c = (pred == labels).sum(1)\n","                    cc = c == 2\n","                    correct += cc.sum()\n","                    total += labels.size(0)\n","\n","                    bb1_pred = torch.max(bb1[:,0,:].data, 1)[1]\n","                    bb2_pred = torch.max(bb1[:,1,:].data, 1)[1]\n","                    bb3_pred = torch.max(bb1[:,2,:].data, 1)[1]\n","                    bb4_pred = torch.max(bb1[:,3,:].data, 1)[1]\n","\n","                    for i in range(param.batch_size):\n","                        this_bb = np.empty((2, 4))\n","                        this_bb[0][0] = bb1_pred[i]\n","                        this_bb[0][1] = bb2_pred[i]\n","                        this_bb[0][2] = bb1_pred[i]+28\n","                        this_bb[0][3] = bb2_pred[i]+28\n","                        this_bb[1][0] = bb3_pred[i]\n","                        this_bb[1][1] = bb4_pred[i]\n","                        this_bb[1][2] = bb3_pred[i]+28\n","                        this_bb[1][3] = bb4_pred[i]+28\n","                        pred_bb.append(this_bb)\n","                        truth_bb.append(np.array(bbs[i]))\n","\n","            accuracy = 100. * correct / total\n","            # iou = compute_iou(np.array(pred_bb), np.array(truth_bb))\n","            # just 0 here\n","            iou = 0.0\n","            print(\"epoch: {}. Accuracy: {:.4f}. iou: {:.4f}.\".format(epoch, accuracy, iou))'''\n","\n","    return model\n","\n","\n","def classify_and_detect(images):\n","    \"\"\"\n","    :param np.ndarray images: N x 4096 array containing N 64x64 images flattened into vectors\n","    :return: np.ndarray, np.ndarray\n","    \"\"\"\n","\n","    N = images.shape[0]\n","    # pred_class: Your predicted labels for the 2 digits, shape [N, 2]\n","    pred_class = np.empty((N, 2), dtype=np.int32)\n","    # pred_bboxes: Your predicted bboxes for 2 digits, shape [N, 2, 4]\n","    pred_bboxes = np.empty((N, 2, 4), dtype=np.float64)\n","\n","    # add your code here to fill in pred_class and pred_bboxes\n","    param = TrainParams()\n","\n","    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","    #images = images.to(device)\n","\n","    if param.load_weights:\n","        print(\"loading...\")\n","        model=ResNet(BlockNet)\n","        model.load_state_dict(torch.load(param.weights_path,map_location=device))\n","    else:\n","        print(\"training ...\")\n","        device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","        print(torch.cuda.is_available())\n","        model = train(device, param)\n","        print(\"Saving...\") \n","        torch.save(model.state_dict(), param.weights_path)\n","        # model.to(torch.device(\"cpu\"))\n","\n","    print(\"testing...\")\n","    model.eval()\n","    with torch.no_grad():\n","      for i, image in enumerate(images):\n","          image = torch.Tensor(image).view(1, 1, 64, 64)\n","          image = image.to(device)\n","          cls, bb1 = model(image)\n","          cls = torch.sort(cls)[0]\n","          pred_cls = torch.max(cls.data, 1)[1]\n","          pred_class[i] = pred_cls.cpu().detach().numpy()\n","          \n","          bb1_pred = torch.max(bb1[:,0,:].data, 1)[1]\n","          bb2_pred = torch.max(bb1[:,1,:].data, 1)[1]\n","          bb3_pred = torch.max(bb1[:,2,:].data, 1)[1]\n","          bb4_pred = torch.max(bb1[:,3,:].data, 1)[1]\n","\n","          this_bb = np.empty((2, 4))\n","          this_bb[0][0] = bb1_pred\n","          this_bb[0][1] = bb2_pred\n","          this_bb[0][2] = bb1_pred+28\n","          this_bb[0][3] = bb2_pred+28\n","          this_bb[1][0] = bb3_pred\n","          this_bb[1][1] = bb4_pred\n","          this_bb[1][2] = bb3_pred+28\n","          this_bb[1][3] = bb4_pred+28\n","          pred_bboxes[i] = this_bb\n","\n","    return pred_class, pred_bboxes"],"execution_count":null,"outputs":[]}]}